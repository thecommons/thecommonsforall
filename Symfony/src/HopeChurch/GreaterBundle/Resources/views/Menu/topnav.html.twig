{% macro attributes(attributes) %}
{% for name, value in attributes %}
    {%- if value is not none and value is not sameas(false) -%}
        {{- ' %s="%s"'|format(name, value is sameas(true) ? name|e : value|e)|raw -}}
    {%- endif -%}
{%- endfor -%}
{% endmacro %}

{% block compressed_root %}
{% spaceless %}
{{ block('root') }}
{% endspaceless %}
{% endblock %}

{% block root %}
{% set listAttributes = item.childrenAttributes %}
<div class="navbar navbar-fixed-top navbar-inverse" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse"
              data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="{{ path('hope_church_greater') }}">
        Something Greater
      </a>
    </div>
    <div class="collapse navbar-collapse">
      {{ block('list') -}}
    </div>
  </div>
</div>
{% endblock %}

{% block list %}
{% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}

{% import _self as knp_menu %}

{% if item.level is sameas(0) %}
  {%- set ul_class = 'nav navbar-nav' %}
{% else %}
  {%- set ul_class = 'dropdown-menu' %}
{% endif %}

{%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
{%- set childrenClasses = childrenClasses|merge([ul_class]) %}
{%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}

<ul {{ knp_menu.attributes(listAttributes) }}>
  {{ block('children') }}
</ul>
{% endif %}
{% endblock %}

{% block children %}
{# save current variables #}
{% set currentOptions = options %}
{% set currentItem = item %}
{# update the depth for children #}
{% if options.depth is not none %}
{% set options = currentOptions|merge({'depth': currentOptions.depth - 1}) %}
{% endif %}
{% for item in currentItem.children %}
    {{ block('item') }}
{% endfor %}
{# restore current variables #}
{% set item = currentItem %}
{% set options = currentOptions %}
{% endblock %}

{% block item %}
  {% if item.displayed %}
    {# building the class of the item #}
    {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
    {%- if matcher.isCurrent(item) %}
      {%- set classes = classes|merge(['active']) %}
    {%- elseif matcher.isAncestor(item, options.depth) %}
      {%- set classes = classes|merge(['active']) %}
    {%- endif %}
    {%- if item.actsLikeFirst %}
      {%- set classes = classes|merge([options.firstClass]) %}
    {%- endif %}
    {%- if item.actsLikeLast %}
      {%- set classes = classes|merge([options.lastClass]) %}
    {%- endif %}
    {%- if item.hasChildren %}
      {%- set classes = classes|merge(['dropdown']) %}
    {%- endif %}
    {%- set attributes = item.attributes %}
    {%- if classes is not empty %}
      {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {%- endif %}
    {# displaying the item #}
    {% import _self as knp_menu %}
    <li{{ knp_menu.attributes(attributes) }}>
      {%- if item.hasChildren %}
        {{ block('dropdownLinkElement') }}
      {%- elseif item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
        {{ block('linkElement') }}
      {%- else %}
        {{ block('spanElement') }}
      {%- endif %}
      {# render the list of children#}
      {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
      {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
      {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
      {{ block('list') }}
    </li>

{% endif %}
{% endblock %}

{% block linkElement %}{% import _self as knp_menu %}<a href="{{ item.uri }}"{{ knp_menu.attributes(item.linkAttributes) }}>{{ block('label')|title }}</a>{% endblock %}

{% block spanElement %}{% import _self as knp_menu %}<span{{ knp_menu.attributes(item.labelAttributes) }}>{{ block('label') }}</span>{% endblock %}

{% block dropdownLinkElement %}
{% import _self as knp_menu %}
    <a href="#" class="dropdown-toggle" data-toggle="dropdown">{{
      block('label')|title }} <b class="caret"></b></a>
{% endblock %}

{% block label %}{% if options.allow_safe_labels and item.getExtra('safe_label', false) %}{{ item.label|raw }}{% else %}{{ item.label }}{% endif %}{% endblock %}
